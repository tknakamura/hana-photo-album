以下は、**Cursor（チーム/エディタ）に共有する実装計画ドキュメント**です。
Render + PostgreSQL + Cloudflare R2 を前提に、**家族全員が安全にアップロードできる**アルバムサイトを最短で動かし、後から拡張できる構成に落とし込んでいます。

---

# 家族フォト/ビデオ アルバム – 実装計画（Render + R2）

## 0. 目的 / 非目的

**目的**

* 家族アカウント（ID/PW済）で**全員がアップロード可**、安全に閲覧可。
* オリジナルは**R2に私有保存**、配信は**期限付きURL**（CDNキャッシュ前提）。
* メタデータは**Render Managed PostgreSQL**、検索/並び替え/アルバム管理に対応。

**非目的（v1ではやらない）**

* 顔認識、自動タグ付けの高度検索
* 公開ギャラリー（第三者への恒久公開URL）
* 外部SaaSログイン（Google/Apple）連携

---

## 1. アーキテクチャ概要

* **Frontend**: Next.js（App Router 推奨）
* **Backend API**: Node/Express もしくは Next.js Route Handlers
* **DB**: Render Managed PostgreSQL
* **Object Storage**: Cloudflare R2（**完全プライベート**）
* **CDN**: Cloudflare（R2の表と同じアカウントでOK）
* **Worker**: 画像/動画の派生生成（BullMQ + Redis or Render Background Worker）

**データ流れ（アップロード）**

1. Client → API `/uploads/init`（ファイル情報/MIME/sha256提出）
2. API → R2 向け**署名付きPUT URL**を発行（有効 5–10分）
3. Client → 署名URLに**直接PUT**（大容量は**Multipart Upload**）
4. Client → API `/uploads/complete`
5. API → EXIF抽出/メタ更新 → **派生生成ジョブ投入**（thumb/large/webp/avif）

**閲覧**

* API `/photos/:id/url?variant=large` → **署名付きGET URL**を短寿命発行 → ブラウザ表示（CDNで長期キャッシュ）

---

## 2. スキーマ（PostgreSQL）

```sql
-- users: 既存前提（family_id必須）
-- role: 'admin' | 'parent' | 'child'
-- 認証後に req.user = { id, family_id, role } をミドルウェアで保証

create table if not exists photos(
  id uuid primary key,
  family_id uuid not null,
  owner_user_id uuid not null,
  bucket_key text not null,       -- r2://bucket/orig/<family_id>/<uuid>.jpg
  mime text not null,
  bytes bigint not null,
  width int, height int,
  taken_at timestamptz,
  exif_json jsonb,
  sha256 char(64) not null,
  phash char(16),
  created_at timestamptz default now(),
  unique(family_id, sha256)
);

create table if not exists albums(
  id uuid primary key,
  family_id uuid not null,
  title text not null,
  cover_photo_id uuid,
  created_at timestamptz default now()
);

create table if not exists album_photos(
  album_id uuid not null,
  photo_id uuid not null,
  sort_key bigint default extract(epoch from now())::bigint,
  created_at timestamptz default now(),
  primary key(album_id, photo_id)
);

create table if not exists photo_variants(
  photo_id uuid not null,
  variant text not null,          -- 'thumb'|'large'|'webp'|'avif' など
  bucket_key text not null,
  width int, height int, bytes bigint,
  created_at timestamptz default now(),
  primary key(photo_id, variant)
);

create index if not exists idx_photos_family_taken on photos(family_id, taken_at desc);
```

---

## 3. エンドポイント仕様（v1）

* `POST /uploads/init`
  入力: `filename`, `size`, `mime`, `sha256`
  出力: `{ putUrl, key, tempPhotoId }`
  機能: **MIME/サイズ検証**, **重複（sha256）チェック**, **R2 Presigned PUT URL発行**

* `POST /uploads/complete`
  入力: `{ tempPhotoId, key }`
  機能: R2の**HEAD確認**→EXIF抽出→`photos`更新→**派生生成ジョブ**投入

* `GET /photos/:id/url?variant=large`
  出力: `{ url }`（署名付きGET, 有効5分）
  認可: `family_id`でスコープ

* `GET /albums/:id` / `POST /albums` / `POST /albums/:id/photos`
  基本CRUD（すべて `family_id` 条件必須）

---

## 4. 認証/認可・セキュリティ

* 既存のID/PASS認証を継続。ログイン後セッション/トークンから**必ず `family_id` を解決**。
* **全クエリに `WHERE family_id = $1` を強制**。ユーザーIDのみで判定しない。
* R2バケットは**非公開**、公開は**Presigned URLのみ**。
* CORS: 自ドメインの`GET/PUT/HEAD`のみ許可。
* アップロード制限: `image/*`, `video/*`, サイズ上限（例: 1ファイル 2GB）。
* 任意: アップロード時の**clamavスキャン**（ワーカー併設）。

---

## 5. R2 設定（必須）

* バケット作成（private）
* API Token（Access/Secret）発行
* CORS: AllowedOrigins=[本番/開発URL], Methods=[GET,PUT,HEAD], Headers=["*"], MaxAge=3600
* ライフサイクル：`thumb/*` は90日で削除可、原本はIA移行（後述）でコスト最適化

**環境変数（Renderに設定）**
`R2_ENDPOINT` / `R2_BUCKET` / `R2_ACCESS_KEY` / `R2_SECRET_KEY`

---

## 6. 署名URL（実装サンプル：Node / AWS SDK v3）

```ts
import { S3Client, PutObjectCommand, GetObjectCommand, HeadObjectCommand } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";

export const s3 = new S3Client({
  region: "auto",
  endpoint: process.env.R2_ENDPOINT!,
  credentials: { accessKeyId: process.env.R2_ACCESS_KEY!, secretAccessKey: process.env.R2_SECRET_KEY! }
});

export async function createPresignedPut({ key, mime }: { key: string; mime: string; }) {
  const cmd = new PutObjectCommand({ Bucket: process.env.R2_BUCKET!, Key: key, ContentType: mime });
  return getSignedUrl(s3, cmd, { expiresIn: 600 });
}

export async function createPresignedGet({ key }: { key: string; }) {
  const cmd = new GetObjectCommand({ Bucket: process.env.R2_BUCKET!, Key: key });
  return getSignedUrl(s3, cmd, { expiresIn: 300 });
}
```

---

## 7. 派生生成（Worker）

* キュー: BullMQ（Redis） / 代替: Render Background Worker + キュー
* ライブラリ: `sharp`（画像）
* 生成物:

  * `thumb`（例 320px, WebP）
  * `large`（例 2048px, JPEG/WebP）
  * `webp/avif`（可変）
* 成功時に `photo_variants` へ `bucket_key` を保存
* 動画は後続：`ffmpeg`で`mp4`最適化/プレビュー生成（HLSはv2）

---

## 8. クライアント実装要点（Next.js想定）

* ドラッグ&ドロップ、**並列アップロード**、失敗時**自動リトライ**
* **sha256を事前計算** → `/uploads/init` で重複なら即スキップ
* 10MB超は**Multipart Upload**（再開対応）
* 完了後はSSE/ポーリングで派生生成の完了を検知 → サムネ差し替え

---

## 9. コスト運用（R2）

* 保存: **$0.015/GB/月**
* エグレス: **無料**（CDNヒットを高める）
* リクエスト: ClassA/B 微少（アップ頻度・初回ミス率に依存）
* 低頻度化した原本は**IAへ移行**（取り出し課金に注意）。
* **Cache-Control** を長めに設定（変異時はKey付け替えでキャッシュ破棄）。

---

## 10. モニタリング/運用

* **構成ログ**: APIアクセス、アップロード/閲覧 成功/失敗
* **メトリクス**: 1) アップロード成功率、2) 画像派生生成の滞留数、3) CDNヒット率、4) R2保存量/月
* **バックアップ**: DB自動バックアップ + R2 バージョニング（推奨）
* **監査**: `uploads_log(user_id, family_id, photo_id, ip, ua, created_at)`

---

## 11. 移行/連携（任意）

* **Googleフォト取り込み**（OAuth/`mediaItems.search`で新着をR2へ取り込み）
* ハッシュ重複排除で多重取り込みを防止

---

## 12. リスクと対策

* **誤公開**：R2は**常時private**、公開は必ず短寿命**Presigned URL**のみ
* **権限漏れ**：すべて `family_id` フィルタを必須化（ミドルウェア + SQLテンプレ）
* **大容量動画失敗**：Multipart + 再試行 + 分割サイズ調整（5–50MB）
* **生成処理滞留**：キュー監視＋同一`sha256`再生成の冪等制御

---

## 13. タスク分解（2週間想定・例）

**Day 1–2**: R2バケット/CORS/IAM、Render環境変数、DBスキーマ適用
**Day 3–4**: `/uploads/init`, `/uploads/complete`, Presigned PUT/GET 実装
**Day 5–6**: 画像派生ワーカー（thumb/large/webp/avif）、キュー配線
**Day 7–8**: フロントのアップローダ（並列/進捗/重複スキップ/再試行）
**Day 9**: アルバムCRUD、一覧/閲覧（期限付きURL）、無限スクロール
**Day 10**: 監視/ログ、レート制限、簡易E2Eテスト
**Day 11–12**: 調整/UX磨き（撮影日ソート/回転/メタ編集）
**Day 13–14**: ステージング→本番切替、初期データ投入

---

## 14. 受け入れ基準（Definition of Done）

* 認証済ユーザーが**1GB超の動画含む複数ファイル**を安定アップロードできる
* **同一家族内の完全重複**は**自動検知・スキップ**される
* アルバム一覧/詳細で**サムネが高速表示**（CDNヒット率>80%の想定）
* 原本および派生は**第三者に参照不可能**（Presigned以外は403）
* Cloudflare/R2の**CORS/ライフサイクル**が有効
* 基本メトリクス（成功率/滞留数/保存量）がダッシュボードで可視

---

## 付録A: Key命名規則（R2）

```
orig/<family_id>/<uuid>.<ext>
thumb/<family_id>/<photo_id>.webp
large/<family_id>/<photo_id>.webp
avif/<family_id>/<photo_id>.avif
```

## 付録B: バリデーション（API）

* 拒否MIME: `application/*` など画像/動画以外
* サイズ: 1ファイル最大 2GB（環境で調整）
* Rate limit: user+IP で 1分あたり N リクエスト

---

**このまま Cursor のプロジェクトREADME か Notion に貼り付けてください。**
必要なら Next.js/Express の**実装テンプレ（そのまま動く雛形）**を出します。希望スタック（Next.js/Express/Prisma など）を教えてくれれば、API/ワーカー/フロントをまとめて生成します。
